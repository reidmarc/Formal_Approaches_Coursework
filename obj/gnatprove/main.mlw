(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "doorstatus" defined at main.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Main__doorstatus
 use import "_gnatprove_standard".Main
 use import "int".Int

 type doorstatus 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = doorstatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type doorstatus__ref =
  { mutable doorstatus__content "model_trace:" "name:" : doorstatus }
 
 function doorstatus__ref___projection 
   (a : doorstatus__ref) : doorstatus =
  a.doorstatus__content
 
 meta "model_projection" function doorstatus__ref___projection
 
 meta "inline : no" function doorstatus__ref___projection
 
 val doorstatus__havoc 
   (x : doorstatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "doorstatus" defined at main.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Main__doorstatus__rep
 use        Main__doorstatus
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Main__doorstatus.doorstatus, 
 predicate in_range = Main__doorstatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "lockstatus" defined at main.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Main__lockstatus
 use import "_gnatprove_standard".Main
 use import "int".Int

 type lockstatus 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = lockstatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type lockstatus__ref =
  { mutable lockstatus__content "model_trace:" "name:" : lockstatus }
 
 function lockstatus__ref___projection 
   (a : lockstatus__ref) : lockstatus =
  a.lockstatus__content
 
 meta "model_projection" function lockstatus__ref___projection
 
 meta "inline : no" function lockstatus__ref___projection
 
 val lockstatus__havoc 
   (x : lockstatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "lockstatus" defined at main.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Main__lockstatus__rep
 use        Main__lockstatus
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Main__lockstatus.lockstatus, 
 predicate in_range = Main__lockstatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "airlockdoor" defined at main.ads:12, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__airlockdoor__rep
 use import "_gnatprove_standard".Main
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep

 type __split_fields =
  { rec__main__airlockdoor__door "model_trace:.2637" "name:door" : Main__doorstatus.doorstatus; rec__main__airlockdoor__lock "model_trace:.2647" "name:lock" : Main__lockstatus.lockstatus }
 
 function __split_fields_door__projection "model_trace:.2637" "name:door" 
   (a : __split_fields) : Main__doorstatus.doorstatus =
  a.rec__main__airlockdoor__door
 
 meta "model_projection" function __split_fields_door__projection
 
 meta "inline : no" function __split_fields_door__projection
 
 function __split_fields_lock__projection "model_trace:.2647" "name:lock" 
   (a : __split_fields) : Main__lockstatus.lockstatus =
  a.rec__main__airlockdoor__lock
 
 meta "model_projection" function __split_fields_lock__projection
 
 meta "inline : no" function __split_fields_lock__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate main__airlockdoor__door__pred 
   (a : __rep)  =
  true
 
 val rec__main__airlockdoor__door_ 
   (a : __rep) : Main__doorstatus.doorstatus
  requires {  (main__airlockdoor__door__pred a) }
  ensures {  (result = a.__split_fields.rec__main__airlockdoor__door) }
 
 predicate main__airlockdoor__lock__pred 
   (a : __rep)  =
  true
 
 val rec__main__airlockdoor__lock_ 
   (a : __rep) : Main__lockstatus.lockstatus
  requires {  (main__airlockdoor__lock__pred a) }
  ensures {  (result = a.__split_fields.rec__main__airlockdoor__lock) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Main__doorstatus__rep.to_rep a.__split_fields.rec__main__airlockdoor__door) = (Main__doorstatus__rep.to_rep b.__split_fields.rec__main__airlockdoor__door)) /\ ((Main__lockstatus__rep.to_rep a.__split_fields.rec__main__airlockdoor__lock) = (Main__lockstatus__rep.to_rep b.__split_fields.rec__main__airlockdoor__lock)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "airlockdoor" defined at main.ads:12, created in Gnat2Why.Types.Translate_Type *)
module Main__airlockdoor
 use export Main__airlockdoor__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type airlockdoor =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : airlockdoor) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : airlockdoor) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : airlockdoor.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : airlockdoor.
   ((object__alignment a) >= 0))
 
 function main__airlockdoor__door__first__bit 
   : int
 
 function main__airlockdoor__door__last__bit 
   : int
 
 function main__airlockdoor__door__position 
   : int
 
 axiom main__airlockdoor__door__first__bit_axiom :
  ((main__airlockdoor__door__first__bit ) >= 0)
 
 axiom main__airlockdoor__door__last__bit_axiom :
  ((main__airlockdoor__door__last__bit ) > (main__airlockdoor__door__first__bit ))
 
 axiom main__airlockdoor__door__position_axiom :
  ((main__airlockdoor__door__position ) >= 0)
 
 function main__airlockdoor__lock__first__bit 
   : int
 
 function main__airlockdoor__lock__last__bit 
   : int
 
 function main__airlockdoor__lock__position 
   : int
 
 axiom main__airlockdoor__lock__first__bit_axiom :
  ((main__airlockdoor__lock__first__bit ) >= 0)
 
 axiom main__airlockdoor__lock__last__bit_axiom :
  ((main__airlockdoor__lock__last__bit ) > (main__airlockdoor__lock__first__bit ))
 
 axiom main__airlockdoor__lock__position_axiom :
  ((main__airlockdoor__lock__position ) >= 0)
 
 function user_eq 
   (a : airlockdoor) (b : airlockdoor) : bool
 
 function dummy 
   : airlockdoor
 
 type airlockdoor__ref =
  { mutable airlockdoor__content "model_trace:" "name:" : airlockdoor }
 
 function airlockdoor__ref___projection 
   (a : airlockdoor__ref) : airlockdoor =
  a.airlockdoor__content
 
 meta "model_projection" function airlockdoor__ref___projection
 
 meta "inline : no" function airlockdoor__ref___projection
 
 val airlockdoor__havoc 
   (x : airlockdoor__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "operationstatus" defined at main.ads:56, created in Gnat2Why.Types.Translate_Type *)
module Main__operationstatus
 use import "_gnatprove_standard".Main
 use import "int".Int

 type operationstatus 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = operationstatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type operationstatus__ref =
  { mutable operationstatus__content "model_trace:" "name:" : operationstatus }
 
 function operationstatus__ref___projection 
   (a : operationstatus__ref) : operationstatus =
  a.operationstatus__content
 
 meta "model_projection" function operationstatus__ref___projection
 
 meta "inline : no" function operationstatus__ref___projection
 
 val operationstatus__havoc 
   (x : operationstatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "operationstatus" defined at main.ads:56, created in Gnat2Why.Types.Translate_Type *)
module Main__operationstatus__rep
 use        Main__operationstatus
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Main__operationstatus.operationstatus, 
 predicate in_range = Main__operationstatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "content" defined at main.ads:98, created in Gnat2Why.Types.Translate_Type *)
module Main__content
 use import "_gnatprove_standard".Main
 use import "int".Int

 type content 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = content, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type content__ref =
  { mutable content__content "model_trace:" "name:" : content }
 
 function content__ref___projection 
   (a : content__ref) : content =
  a.content__content
 
 meta "model_projection" function content__ref___projection
 
 meta "inline : no" function content__ref___projection
 
 val content__havoc 
   (x : content__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "content" defined at main.ads:98, created in Gnat2Why.Types.Translate_Type *)
module Main__content__rep
 use        Main__content
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Main__content.content, 
 predicate in_range = Main__content.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TtanklevelpercentageB" defined at main.ads:100, created in Gnat2Why.Types.Translate_Type *)
module Main__TtanklevelpercentageB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type ttanklevelpercentageB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = ttanklevelpercentageB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type ttanklevelpercentageB__ref =
  { mutable ttanklevelpercentageB__content "model_trace:" "name:" : ttanklevelpercentageB }
 
 function ttanklevelpercentageB__ref___projection 
   (a : ttanklevelpercentageB__ref) : ttanklevelpercentageB =
  a.ttanklevelpercentageB__content
 
 meta "model_projection" function ttanklevelpercentageB__ref___projection
 
 meta "inline : no" function ttanklevelpercentageB__ref___projection
 
 val ttanklevelpercentageB__havoc 
   (x : ttanklevelpercentageB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TtanklevelpercentageB" defined at main.ads:100, created in Gnat2Why.Types.Translate_Type *)
module Main__TtanklevelpercentageB__rep
 use        Main__TtanklevelpercentageB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Main__TtanklevelpercentageB.ttanklevelpercentageB) : int =
  (Main__TtanklevelpercentageB.ttanklevelpercentageB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Main__TtanklevelpercentageB.ttanklevelpercentageB, 
 predicate in_range = Main__TtanklevelpercentageB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "tanklevelpercentage" defined at main.ads:100, created in Gnat2Why.Types.Translate_Type *)
module Main__tanklevelpercentage
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tanklevelpercentage =
  < range 0 100 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  100
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tanklevelpercentage, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tanklevelpercentage__ref =
  { mutable tanklevelpercentage__content "model_trace:" "name:" : tanklevelpercentage }
 
 function tanklevelpercentage__ref___projection 
   (a : tanklevelpercentage__ref) : tanklevelpercentage =
  a.tanklevelpercentage__content
 
 meta "model_projection" function tanklevelpercentage__ref___projection
 
 meta "inline : no" function tanklevelpercentage__ref___projection
 
 val tanklevelpercentage__havoc 
   (x : tanklevelpercentage__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tanklevelpercentage" defined at main.ads:100, created in Gnat2Why.Types.Translate_Type *)
module Main__tanklevelpercentage__rep
 use        Main__tanklevelpercentage
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Main__tanklevelpercentage.tanklevelpercentage) : int =
  (Main__tanklevelpercentage.tanklevelpercentage'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Main__tanklevelpercentage.tanklevelpercentage, 
 predicate in_range = Main__tanklevelpercentage.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "ToxygentankB" defined at main.ads:102, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Main__content
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__content
 use        Main__content__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Main__content.content
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Main__content__rep.to_rep (get a temp___idx_154)) = (Main__content__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Main__content__rep.to_rep (get a temp___idx_154)) = (Main__content__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "ToxygentankB" defined at main.ads:102, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Main__content__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Main__content

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Main__content.component_type, 
 type map = Array__Int__Main__content.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Main__content.get

end

(* Module for axiomatizing comparison for the array theory associated to type "ToxygentankB" defined at main.ads:102, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Main__content_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__content__rep
 use        Array__Int__Main__content

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Main__content.component_type, 
 function to_rep = Main__content__rep.to_rep, 
 type map = Array__Int__Main__content.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Main__content.get, 
 function bool_eq = Array__Int__Main__content.bool_eq

end

(* Module for axiomatizing type "ToxygentankB" defined at main.ads:102, created in Gnat2Why.Types.Translate_Type *)
module Main__ToxygentankB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__content
 use        Main__TtanklevelpercentageB
 use        Main__TtanklevelpercentageB__rep
 use        Main__tanklevelpercentage
 use        Array__Int__Main__content

 type component_type =
  Main__content.content
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Main__content.map, 
 function array_bool_eq = Array__Int__Main__content.bool_eq, 
 type index_base_type = Main__TtanklevelpercentageB.ttanklevelpercentageB, 
 type index_rep_type = int, 
 function to_rep = Main__TtanklevelpercentageB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Main__TtanklevelpercentageB.in_range, 
 predicate index_dynamic_property = Main__tanklevelpercentage.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type toxygentankB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type toxygentankB__ref =
  { mutable toxygentankB__content "model_trace:" "name:" : toxygentankB }
 
 function toxygentankB__ref___projection 
   (a : toxygentankB__ref) : toxygentankB =
  a.toxygentankB__content
 
 meta "model_projection" function toxygentankB__ref___projection
 
 meta "inline : no" function toxygentankB__ref___projection
 
 val toxygentankB__havoc 
   (x : toxygentankB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "oxygentank" defined at main.ads:102, created in Gnat2Why.Types.Translate_Type *)
module Main__oxygentank
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__content
 use        Array__Int__Main__content

 type component_type =
  Main__content.content
 
 function first 
   : int =
  0
 
 function last 
   : int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Main__content.map, 
 function array_bool_eq = Array__Int__Main__content.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "tankstatus" defined at main.ads:104, created in Gnat2Why.Types.Translate_Type *)
module Main__tankstatus
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tankstatus 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tankstatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tankstatus__ref =
  { mutable tankstatus__content "model_trace:" "name:" : tankstatus }
 
 function tankstatus__ref___projection 
   (a : tankstatus__ref) : tankstatus =
  a.tankstatus__content
 
 meta "model_projection" function tankstatus__ref___projection
 
 meta "inline : no" function tankstatus__ref___projection
 
 val tankstatus__havoc 
   (x : tankstatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "tankstatus" defined at main.ads:104, created in Gnat2Why.Types.Translate_Type *)
module Main__tankstatus__rep
 use        Main__tankstatus
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Main__tankstatus.tankstatus, 
 predicate in_range = Main__tankstatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "alarm" defined at main.ads:108, created in Gnat2Why.Types.Translate_Type *)
module Main__alarm
 use import "_gnatprove_standard".Main
 use import "int".Int

 type alarm 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = alarm, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type alarm__ref =
  { mutable alarm__content "model_trace:" "name:" : alarm }
 
 function alarm__ref___projection 
   (a : alarm__ref) : alarm =
  a.alarm__content
 
 meta "model_projection" function alarm__ref___projection
 
 meta "inline : no" function alarm__ref___projection
 
 val alarm__havoc 
   (x : alarm__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "alarm" defined at main.ads:108, created in Gnat2Why.Types.Translate_Type *)
module Main__alarm__rep
 use        Main__alarm
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Main__alarm.alarm, 
 predicate in_range = Main__alarm.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "recievedwarning" defined at main.ads:112, created in Gnat2Why.Types.Translate_Type *)
module Main__recievedwarning
 use import "_gnatprove_standard".Main
 use import "int".Int

 type recievedwarning 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = recievedwarning, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type recievedwarning__ref =
  { mutable recievedwarning__content "model_trace:" "name:" : recievedwarning }
 
 function recievedwarning__ref___projection 
   (a : recievedwarning__ref) : recievedwarning =
  a.recievedwarning__content
 
 meta "model_projection" function recievedwarning__ref___projection
 
 meta "inline : no" function recievedwarning__ref___projection
 
 val recievedwarning__havoc 
   (x : recievedwarning__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "recievedwarning" defined at main.ads:112, created in Gnat2Why.Types.Translate_Type *)
module Main__recievedwarning__rep
 use        Main__recievedwarning
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Main__recievedwarning.recievedwarning, 
 predicate in_range = Main__recievedwarning.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end
(* Module for defining a ref holding the value of variable "outerdoor" defined at main.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Main__outerdoor
 use import "_gnatprove_standard".Main
 use        Main__airlockdoor

 val outerdoor__split_fields #"main.ads" 17 0 0#"model_projected" "model_trace:2659" "name:outerDoor"  : Main__airlockdoor.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "outerdoor" defined at main.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__outerdoor___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "innerdoor" defined at main.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Main__innerdoor
 use import "_gnatprove_standard".Main
 use        Main__airlockdoor

 val innerdoor__split_fields #"main.ads" 18 0 0#"model_projected" "model_trace:2675" "name:innerDoor"  : Main__airlockdoor.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "innerdoor" defined at main.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__innerdoor___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentoperationstatus" defined at main.ads:58, created in Gnat2Why.Decls.Translate_Variable *)
module Main__currentoperationstatus
 use import "_gnatprove_standard".Main

 val currentoperationstatus #"main.ads" 58 0 0#"model_projected" "model_trace:2871" "name:currentOperationStatus"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentoperationstatus" defined at main.ads:58, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__currentoperationstatus___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "oxygentankstatus" defined at main.ads:106, created in Gnat2Why.Decls.Translate_Variable *)
module Main__oxygentankstatus
 use import "_gnatprove_standard".Main

 val oxygentankstatus #"main.ads" 106 0 0#"model_projected" "model_trace:3179" "name:oxygenTankStatus"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "oxygentankstatus" defined at main.ads:106, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__oxygentankstatus___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "oxygentanklowalarm" defined at main.ads:110, created in Gnat2Why.Decls.Translate_Variable *)
module Main__oxygentanklowalarm
 use import "_gnatprove_standard".Main

 val oxygentanklowalarm #"main.ads" 110 0 0#"model_projected" "model_trace:3213" "name:oxygenTankLowAlarm"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "oxygentanklowalarm" defined at main.ads:110, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__oxygentanklowalarm___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "oxygentankwarningrecieved" defined at main.ads:114, created in Gnat2Why.Decls.Translate_Variable *)
module Main__oxygentankwarningrecieved
 use import "_gnatprove_standard".Main

 val oxygentankwarningrecieved #"main.ads" 114 0 0#"model_projected" "model_trace:3247" "name:oxygenTankWarningRecieved"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "oxygentankwarningrecieved" defined at main.ads:114, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__oxygentankwarningrecieved___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "level" defined at main.ads:116, created in Gnat2Why.Decls.Translate_Variable *)
module Main__oxygentanklow__level
 use import "_gnatprove_standard".Main
 use        Array__Int__Main__content

 val level #"main.ads" 116 0 0#"model_projected" "model_trace:3264" "name:level"  : Array__Int__Main__content.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "level" defined at main.ads:116, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__oxygentanklow__level___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "position" defined at main.adb:75, created in Gnat2Why.Decls.Translate_Variable *)
module Main__oxygentanklow__position
 use import "_gnatprove_standard".Main

 val position #"main.adb" 75 0 0#"model_projected" "model_trace:2481" "name:Position"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "position" defined at main.adb:75, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__oxygentanklow__position___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "closeouterairlockdoor" defined at main.ads:28, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__closeouterairlockdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closeinnerairlockdoor" defined at main.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__closeinnerairlockdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openouterairlockdoor" defined at main.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__openouterairlockdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "openinnerairlockdoor" defined at main.ads:46, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__openinnerairlockdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lockouterdoor" defined at main.ads:60, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lockouterdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unlockouterdoor" defined at main.ads:66, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__unlockouterdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "lockinnerdoor" defined at main.ads:72, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lockinnerdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "unlockinnerdoor" defined at main.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__unlockinnerdoor
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "allowoperation" defined at main.ads:84, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__allowoperation
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "prohibitoperation" defined at main.ads:89, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__prohibitoperation
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "oxygentanklow" defined at main.ads:116, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__oxygentanklow
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "soundoxygenlowalarm" defined at main.ads:122, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__soundoxygenlowalarm
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "turnoffoxygenlowalarm" defined at main.ads:129, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__turnoffoxygenlowalarm
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:77, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__oxygentanklow__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__oxygentanklow__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "doorstatus" defined at main.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__doorstatus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (( temp___is_init_155 \/ (Main__doorstatus.first <= Main__doorstatus.last) )) then (
   (Main__doorstatus.dynamic_property Main__doorstatus.first Main__doorstatus.last temp___expr_159)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool)  =
  true

end

(* Module giving axioms for type "lockstatus" defined at main.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lockstatus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (( temp___is_init_162 \/ (Main__lockstatus.first <= Main__lockstatus.last) )) then (
   (Main__lockstatus.dynamic_property Main__lockstatus.first Main__lockstatus.last temp___expr_166)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  true

end

(* Module giving axioms for type "airlockdoor" defined at main.ads:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__airlockdoor___axiom
 use import "_gnatprove_standard".Main
 use        Main__airlockdoor

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : Main__airlockdoor.airlockdoor) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_174 : Main__airlockdoor.airlockdoor) (temp___skip_top_level_175 : bool)  =
  true

end

(* Module giving axioms for type "operationstatus" defined at main.ads:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__operationstatus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__operationstatus

 predicate dynamic_invariant "inline" 
   (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool)  =
  (if (( temp___is_init_178 \/ (Main__operationstatus.first <= Main__operationstatus.last) )) then (
   (Main__operationstatus.dynamic_property Main__operationstatus.first Main__operationstatus.last temp___expr_182)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_183 : int) (temp___skip_top_level_184 : bool)  =
  true

end

(* Module giving axioms for type "content" defined at main.ads:98, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__content___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__content

 predicate dynamic_invariant "inline" 
   (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool)  =
  (if (( temp___is_init_185 \/ (Main__content.first <= Main__content.last) )) then (
   (Main__content.dynamic_property Main__content.first Main__content.last temp___expr_189)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_190 : int) (temp___skip_top_level_191 : bool)  =
  true

end

(* Module giving axioms for type "TtanklevelpercentageB" defined at main.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TtanklevelpercentageB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "tanklevelpercentage" defined at main.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__tanklevelpercentage___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__tanklevelpercentage

 predicate dynamic_invariant "inline" 
   (temp___expr_196 : int) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool)  =
  (if (( temp___is_init_192 \/ (Main__tanklevelpercentage.first <= Main__tanklevelpercentage.last) )) then (
   (Main__tanklevelpercentage.dynamic_property Main__tanklevelpercentage.first Main__tanklevelpercentage.last temp___expr_196)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_197 : int) (temp___skip_top_level_198 : bool)  =
  true

end

(* Module giving axioms for type "ToxygentankB" defined at main.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__ToxygentankB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "oxygentank" defined at main.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__oxygentank___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Main__content
 use        Array__Int__Main__content

 predicate dynamic_invariant "inline" 
   (temp___expr_203 : Array__Int__Main__content.map) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_205 : Array__Int__Main__content.map) (temp___skip_top_level_206 : bool)  =
  true

end

(* Module giving axioms for type "tankstatus" defined at main.ads:104, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__tankstatus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__tankstatus

 predicate dynamic_invariant "inline" 
   (temp___expr_213 : int) (temp___is_init_209 : bool) (temp___skip_constant_210 : bool) (temp___do_toplevel_211 : bool) (temp___do_typ_inv_212 : bool)  =
  (if (( temp___is_init_209 \/ (Main__tankstatus.first <= Main__tankstatus.last) )) then (
   (Main__tankstatus.dynamic_property Main__tankstatus.first Main__tankstatus.last temp___expr_213)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_214 : int) (temp___skip_top_level_215 : bool)  =
  true

end

(* Module giving axioms for type "alarm" defined at main.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__alarm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__alarm

 predicate dynamic_invariant "inline" 
   (temp___expr_220 : int) (temp___is_init_216 : bool) (temp___skip_constant_217 : bool) (temp___do_toplevel_218 : bool) (temp___do_typ_inv_219 : bool)  =
  (if (( temp___is_init_216 \/ (Main__alarm.first <= Main__alarm.last) )) then (
   (Main__alarm.dynamic_property Main__alarm.first Main__alarm.last temp___expr_220)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_221 : int) (temp___skip_top_level_222 : bool)  =
  true

end

(* Module giving axioms for type "recievedwarning" defined at main.ads:112, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__recievedwarning___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__recievedwarning

 predicate dynamic_invariant "inline" 
   (temp___expr_227 : int) (temp___is_init_223 : bool) (temp___skip_constant_224 : bool) (temp___do_toplevel_225 : bool) (temp___do_typ_inv_226 : bool)  =
  (if (( temp___is_init_223 \/ (Main__recievedwarning.first <= Main__recievedwarning.last) )) then (
   (Main__recievedwarning.dynamic_property Main__recievedwarning.first Main__recievedwarning.last temp___expr_227)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_228 : int) (temp___skip_top_level_229 : bool)  =
  true

end
(* Module for declaring a program function (and possibly an axiom) for "closeouterairlockdoor" defined at main.ads:28, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__closeouterairlockdoor___axiom
 use        Main__outerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor

 val closeouterairlockdoor 
   (__void_param : unit) : unit
  requires {  ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) }
  ensures {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__outerdoor.outerdoor__split_fields}
  writes {Main__outerdoor.outerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "closeinnerairlockdoor" defined at main.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__closeinnerairlockdoor___axiom
 use        Main__innerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__innerdoor

 val closeinnerairlockdoor 
   (__void_param : unit) : unit
  requires {  ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) }
  ensures {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__innerdoor.innerdoor__split_fields}
  writes {Main__innerdoor.innerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "openouterairlockdoor" defined at main.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__openouterairlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor

 val openouterairlockdoor 
   (__void_param : unit) : unit
  requires {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) ) }
  ensures {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__outerdoor.outerdoor__split_fields, Main__innerdoor.innerdoor__split_fields}
  writes {Main__outerdoor.outerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "openinnerairlockdoor" defined at main.ads:46, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__openinnerairlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor

 val openinnerairlockdoor 
   (__void_param : unit) : unit
  requires {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) ) }
  ensures {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__outerdoor.outerdoor__split_fields, Main__innerdoor.innerdoor__split_fields}
  writes {Main__innerdoor.innerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "lockouterdoor" defined at main.ads:60, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lockouterdoor___axiom
 use        Main__outerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor

 val lockouterdoor 
   (__void_param : unit) : unit
  requires {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) }
  ensures {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__outerdoor.outerdoor__split_fields}
  writes {Main__outerdoor.outerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "unlockouterdoor" defined at main.ads:66, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__unlockouterdoor___axiom
 use        Main__outerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor

 val unlockouterdoor 
   (__void_param : unit) : unit
  requires {  ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) }
  ensures {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__outerdoor.outerdoor__split_fields}
  writes {Main__outerdoor.outerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "lockinnerdoor" defined at main.ads:72, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lockinnerdoor___axiom
 use        Main__innerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__innerdoor

 val lockinnerdoor 
   (__void_param : unit) : unit
  requires {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) }
  ensures {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__innerdoor.innerdoor__split_fields}
  writes {Main__innerdoor.innerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "unlockinnerdoor" defined at main.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__unlockinnerdoor___axiom
 use        Main__innerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__innerdoor

 val unlockinnerdoor 
   (__void_param : unit) : unit
  requires {  ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) }
  ensures {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True True True True) ) }
  reads {Main__innerdoor.innerdoor__split_fields}
  writes {Main__innerdoor.innerdoor__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "allowoperation" defined at main.ads:84, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__allowoperation___axiom
 use        Main__currentoperationstatus
 use        Main__outerdoor
 use        Main__innerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__outerdoor
 use        Main__innerdoor
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus

 val allowoperation 
   (__void_param : unit) : unit
  requires {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) /\ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) ) }
  ensures {  ( (Main__currentoperationstatus.currentoperationstatus.int__content = 0) /\ (Main__operationstatus___axiom.dynamic_invariant Main__currentoperationstatus.currentoperationstatus.int__content True True True True) ) }
  reads {Main__outerdoor.outerdoor__split_fields, Main__innerdoor.innerdoor__split_fields}
  writes {Main__currentoperationstatus.currentoperationstatus}

end

(* Module for declaring a program function (and possibly an axiom) for "prohibitoperation" defined at main.ads:89, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__prohibitoperation___axiom
 use        Main__currentoperationstatus
 use        Main__outerdoor
 use        Main__innerdoor
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__outerdoor
 use        Main__innerdoor
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus

 val prohibitoperation 
   (__void_param : unit) : unit
  requires {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) \/ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) }
  ensures {  ( (Main__currentoperationstatus.currentoperationstatus.int__content = 1) /\ (Main__operationstatus___axiom.dynamic_invariant Main__currentoperationstatus.currentoperationstatus.int__content True True True True) ) }
  reads {Main__outerdoor.outerdoor__split_fields, Main__innerdoor.innerdoor__split_fields}
  writes {Main__currentoperationstatus.currentoperationstatus}

end

(* Module for declaring a program function (and possibly an axiom) for "oxygentanklow" defined at main.ads:116, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__oxygentanklow___axiom
 use        Main__oxygentankstatus
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__oxygentank___axiom
 use        Main__tankstatus___axiom
 use        Main__oxygentankstatus
 use        Array__Int__Main__content

 val oxygentanklow 
   (level : Array__Int__Main__content.map__ref) : unit
  requires {  (Main__oxygentankstatus.oxygentankstatus.int__content = 0) }
  ensures {  ( (Main__oxygentankstatus.oxygentankstatus.int__content = 1) /\ ( (Main__oxygentank___axiom.dynamic_invariant level.Array__Int__Main__content.map__content True True True True) /\ (Main__tankstatus___axiom.dynamic_invariant Main__oxygentankstatus.oxygentankstatus.int__content True True True True) ) ) }
  reads {Main__oxygentankstatus.oxygentankstatus}
  writes {Main__oxygentankstatus.oxygentankstatus, level}

end

(* Module for declaring a program function (and possibly an axiom) for "soundoxygenlowalarm" defined at main.ads:122, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__soundoxygenlowalarm___axiom
 use        Main__oxygentanklowalarm
 use        Main__oxygentankstatus
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__oxygentankstatus
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm

 val soundoxygenlowalarm 
   (__void_param : unit) : unit
  requires {  ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 1) /\ (Main__oxygentankstatus.oxygentankstatus.int__content = 1) ) }
  ensures {  ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 0) /\ (Main__alarm___axiom.dynamic_invariant Main__oxygentanklowalarm.oxygentanklowalarm.int__content True True True True) ) }
  reads {Main__oxygentankstatus.oxygentankstatus, Main__oxygentanklowalarm.oxygentanklowalarm}
  writes {Main__oxygentanklowalarm.oxygentanklowalarm}

end

(* Module for declaring a program function (and possibly an axiom) for "turnoffoxygenlowalarm" defined at main.ads:129, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__turnoffoxygenlowalarm___axiom
 use        Main__oxygentankwarningrecieved
 use        Main__oxygentanklowalarm
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm
 use        Main__oxygentankwarningrecieved

 val turnoffoxygenlowalarm 
   (__void_param : unit) : unit
  requires {  ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 0) /\ (Main__oxygentankwarningrecieved.oxygentankwarningrecieved.int__content = 0) ) }
  ensures {  ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 1) /\ (Main__alarm___axiom.dynamic_invariant Main__oxygentanklowalarm.oxygentanklowalarm.int__content True True True True) ) }
  reads {Main__oxygentanklowalarm.oxygentanklowalarm, Main__oxygentankwarningrecieved.oxygentankwarningrecieved}
  writes {Main__oxygentanklowalarm.oxygentanklowalarm}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "main" defined at main.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Main__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus
 use        Main__tankstatus___axiom
 use        Main__oxygentankstatus
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm
 use        Main__recievedwarning___axiom
 use        Main__oxygentankwarningrecieved
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom
 use        Main__innerdoor___axiom
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus___axiom
 use        Main__tankstatus___axiom
 use        Main__oxygentankstatus___axiom
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm___axiom
 use        Main__recievedwarning___axiom
 use        Main__oxygentankwarningrecieved___axiom

 let def #"main.ads" 1 0 0#"GP_Subp:main.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"main.ads" 1 0 0# true }
  ensures { #"main.ads" 1 0 0# true }
   =
  ( (#"main.ads" 2 0 0# ());
  (#"main.ads" 9 0 0# ());
  (#"main.ads" 10 0 0# ());
  (#"main.ads" 12 0 0# ());
  (#"main.ads" 17 0 0# ());
  (#"main.ads" 17 0 0# ());
  (#"main.ads" 17 0 0# ());
  (#"main.ads" 17 0 0# ( (let main__outerdoor__assume = { Main__airlockdoor.__split_fields = { Main__airlockdoor.rec__main__airlockdoor__door = (Main__doorstatus__rep.of_rep(1)); Main__airlockdoor.rec__main__airlockdoor__lock = (Main__lockstatus__rep.of_rep(0)) } } in (
   #"main.ads" 17 0 0# Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(main__outerdoor__assume)) )))
  ;
  #"main.ads" 17 0 0# assume { #"main.ads" 17 0 0# (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) } ));
  (#"main.ads" 18 0 0# ( (let main__innerdoor__assume = { Main__airlockdoor.__split_fields = { Main__airlockdoor.rec__main__airlockdoor__door = (Main__doorstatus__rep.of_rep(1)); Main__airlockdoor.rec__main__airlockdoor__lock = (Main__lockstatus__rep.of_rep(0)) } } in (
   #"main.ads" 18 0 0# Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(main__innerdoor__assume)) )))
  ;
  #"main.ads" 18 0 0# assume { #"main.ads" 18 0 0# (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) } ));
  (#"main.ads" 28 0 0# ());
  (#"main.ads" 31 0 0# ());
  (#"main.ads" 30 0 0# ());
  (#"main.ads" 29 0 0# ());
  (#"main.ads" 34 0 0# ());
  (#"main.ads" 37 0 0# ());
  (#"main.ads" 36 0 0# ());
  (#"main.ads" 35 0 0# ());
  (#"main.ads" 40 0 0# ());
  (#"main.ads" 43 0 0# ());
  (#"main.ads" 42 0 0# ());
  (#"main.ads" 42 0 0# ());
  (#"main.ads" 42 0 0# ());
  (#"main.ads" 41 0 0# ());
  (#"main.ads" 46 0 0# ());
  (#"main.ads" 49 0 0# ());
  (#"main.ads" 48 0 0# ());
  (#"main.ads" 48 0 0# ());
  (#"main.ads" 48 0 0# ());
  (#"main.ads" 47 0 0# ());
  (#"main.ads" 56 0 0# ());
  (#"main.ads" 58 0 0# ());
  (#"main.ads" 58 0 0# ( #"main.ads" 58 0 0# Main__currentoperationstatus.currentoperationstatus.int__content <- ( 1 );
  #"main.ads" 58 0 0# assume { #"main.ads" 58 0 0# (Main__operationstatus___axiom.dynamic_invariant Main__currentoperationstatus.currentoperationstatus.int__content True False True True) } ));
  (#"main.ads" 60 0 0# ());
  (#"main.ads" 63 0 0# ());
  (#"main.ads" 62 0 0# ());
  (#"main.ads" 62 0 0# ());
  (#"main.ads" 61 0 0# ());
  (#"main.ads" 66 0 0# ());
  (#"main.ads" 69 0 0# ());
  (#"main.ads" 68 0 0# ());
  (#"main.ads" 67 0 0# ());
  (#"main.ads" 72 0 0# ());
  (#"main.ads" 75 0 0# ());
  (#"main.ads" 74 0 0# ());
  (#"main.ads" 74 0 0# ());
  (#"main.ads" 73 0 0# ());
  (#"main.ads" 78 0 0# ());
  (#"main.ads" 81 0 0# ());
  (#"main.ads" 80 0 0# ());
  (#"main.ads" 79 0 0# ());
  (#"main.ads" 84 0 0# ());
  (#"main.ads" 87 0 0# ());
  (#"main.ads" 86 0 0# ());
  (#"main.ads" 86 0 0# ());
  (#"main.ads" 85 0 0# ());
  (#"main.ads" 89 0 0# ());
  (#"main.ads" 92 0 0# ());
  (#"main.ads" 91 0 0# ());
  (#"main.ads" 90 0 0# ());
  (#"main.ads" 98 0 0# ());
  (#"main.ads" 100 0 0# ());
  (#"main.ads" 102 0 0# ());
  (#"main.ads" 104 0 0# ());
  (#"main.ads" 106 0 0# ());
  (#"main.ads" 106 0 0# ( #"main.ads" 106 0 0# Main__oxygentankstatus.oxygentankstatus.int__content <- ( 0 );
  #"main.ads" 106 0 0# assume { #"main.ads" 106 0 0# (Main__tankstatus___axiom.dynamic_invariant Main__oxygentankstatus.oxygentankstatus.int__content True False True True) } ));
  (#"main.ads" 108 0 0# ());
  (#"main.ads" 110 0 0# ());
  (#"main.ads" 110 0 0# ( #"main.ads" 110 0 0# Main__oxygentanklowalarm.oxygentanklowalarm.int__content <- ( 1 );
  #"main.ads" 110 0 0# assume { #"main.ads" 110 0 0# (Main__alarm___axiom.dynamic_invariant Main__oxygentanklowalarm.oxygentanklowalarm.int__content True False True True) } ));
  (#"main.ads" 112 0 0# ());
  (#"main.ads" 114 0 0# ());
  (#"main.ads" 114 0 0# ( #"main.ads" 114 0 0# Main__oxygentankwarningrecieved.oxygentankwarningrecieved.int__content <- ( 1 );
  #"main.ads" 114 0 0# assume { #"main.ads" 114 0 0# (Main__recievedwarning___axiom.dynamic_invariant Main__oxygentankwarningrecieved.oxygentankwarningrecieved.int__content True False True True) } ));
  (#"main.ads" 116 0 0# ());
  (#"main.ads" 119 0 0# ());
  (#"main.ads" 118 0 0# ());
  (#"main.ads" 117 0 0# ());
  (#"main.ads" 122 0 0# ());
  (#"main.ads" 125 0 0# ());
  (#"main.ads" 124 0 0# ());
  (#"main.ads" 124 0 0# ());
  (#"main.ads" 123 0 0# ());
  (#"main.ads" 129 0 0# ());
  (#"main.ads" 132 0 0# ());
  (#"main.ads" 131 0 0# ());
  (#"main.ads" 131 0 0# ());
  (#"main.ads" 130 0 0# ());
  (#"main.ads" 130 0 0# ());
  (#"main.ads" 130 0 0# ());
  (#"main.ads" 130 0 0# ());
  (#"main.ads" 130 0 0# ());
  (#"main.ads" 130 0 0# ());
  (#"main.ads" 130 0 0# ());
  (#"main.adb" 2 0 0# ());
  (#"main.adb" 9 0 0# ());
  (#"main.adb" 14 0 0# ());
  (#"main.adb" 19 0 0# ());
  (#"main.adb" 24 0 0# ());
  (#"main.adb" 34 0 0# ());
  (#"main.adb" 40 0 0# ());
  (#"main.adb" 46 0 0# ());
  (#"main.adb" 52 0 0# ());
  (#"main.adb" 58 0 0# ());
  (#"main.adb" 64 0 0# ());
  (#"main.adb" 74 0 0# ());
  (#"main.adb" 87 0 0# ());
  (#"main.adb" 93 0 0# ());
  ( "GP_Sloc:main.adb:116:1" (#"main.adb" 116 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeouterairlockdoor" defined at main.ads:28, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__closeouterairlockdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom

 let def #"main.ads" 28 0 0#"W:diverges:N" "GP_Subp:main.ads:28" 
   (__void_param : unit)
  requires { #"main.ads" 28 0 0# true }
  ensures { #"main.ads" 28 0 0# (#"main.ads" 31 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:main.ads:31:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     Post => outerDoor.door = Closed;
             ^ main.ads:31:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( "GP_Pretty_Ada:3422" "GP_Sloc:main.ads:31:14" ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:28 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:28 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:28 *)
  ;
   abstract ensures {true}(let _ = ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:28 *)
  ;
   assume {  ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) };
   try
   ( ( "GP_Sloc:main.adb:11:7" (#"main.adb" 11 0 0# ()) );
   ( "GP_Sloc:main.adb:11:22" (#"main.adb" 11 0 0# (let temp___233 = (let temp___232 = { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 11 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields(temp___232)))) in (
     ()))
     end ;
    { ( temp___232 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___232)) ) with Main__airlockdoor.rec__main__airlockdoor__door = (Main__doorstatus__rep.of_rep(1)) } } )))
    in (
    #"main.adb" 11 0 0# Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___233)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closeinnerairlockdoor" defined at main.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__closeinnerairlockdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__innerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__innerdoor___axiom

 let def #"main.ads" 34 0 0#"W:diverges:N" "GP_Subp:main.ads:34" 
   (__void_param : unit)
  requires { #"main.ads" 34 0 0# true }
  ensures { #"main.ads" 34 0 0# (#"main.ads" 37 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:37:14" "GP_Id:1" "comment:     Post => innerDoor.door = Closed;
             ^ main.ads:37:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3470" "GP_Sloc:main.ads:37:14" ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:34 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:34 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:34 *)
  ;
   abstract ensures {true}(let _ = ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:34 *)
  ;
   assume {  ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) };
   try
   ( ( "GP_Sloc:main.adb:16:7" (#"main.adb" 16 0 0# ()) );
   ( "GP_Sloc:main.adb:16:22" (#"main.adb" 16 0 0# (let temp___235 = (let temp___234 = { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 16 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields(temp___234)))) in (
     ()))
     end ;
    { ( temp___234 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___234)) ) with Main__airlockdoor.rec__main__airlockdoor__door = (Main__doorstatus__rep.of_rep(1)) } } )))
    in (
    #"main.adb" 16 0 0# Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___235)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openouterairlockdoor" defined at main.ads:40, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__openouterairlockdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom
 use        Main__innerdoor___axiom

 let def #"main.ads" 40 0 0#"W:diverges:N" "GP_Subp:main.ads:40" 
   (__void_param : unit)
  requires { #"main.ads" 40 0 0# true }
  ensures { #"main.ads" 40 0 0# (#"main.ads" 43 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:43:14" "GP_Id:2" "comment:     Post => outerDoor.door = Open;
             ^ main.ads:43:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3571" "GP_Sloc:main.ads:43:14" ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:40 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:40 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:40 *)
  ;
   abstract ensures {true}(let _ = ( ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) && ( ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) && ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:40 *)
  ;
   assume {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) ) };
   try
   ( ( "GP_Sloc:main.adb:21:7" (#"main.adb" 21 0 0# ()) );
   ( "GP_Sloc:main.adb:21:22" (#"main.adb" 21 0 0# (let temp___237 = (let temp___236 = { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 21 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields(temp___236)))) in (
     ()))
     end ;
    { ( temp___236 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___236)) ) with Main__airlockdoor.rec__main__airlockdoor__door = (Main__doorstatus__rep.of_rep(0)) } } )))
    in (
    #"main.adb" 21 0 0# Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___237)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "openinnerairlockdoor" defined at main.ads:46, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__openinnerairlockdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom
 use        Main__innerdoor___axiom

 let def #"main.ads" 46 0 0#"W:diverges:N" "GP_Subp:main.ads:46" 
   (__void_param : unit)
  requires { #"main.ads" 46 0 0# true }
  ensures { #"main.ads" 46 0 0# (#"main.ads" 49 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:49:14" "GP_Id:3" "comment:     Post => innerDoor.door = Open;
             ^ main.ads:49:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3686" "GP_Sloc:main.ads:49:14" ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:46 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:46 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:46 *)
  ;
   abstract ensures {true}(let _ = ( ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) && ( ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) && ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:46 *)
  ;
   assume {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) ) };
   try
   ( ( "GP_Sloc:main.adb:26:7" (#"main.adb" 26 0 0# ()) );
   ( "GP_Sloc:main.adb:26:22" (#"main.adb" 26 0 0# (let temp___239 = (let temp___238 = { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 26 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields(temp___238)))) in (
     ()))
     end ;
    { ( temp___238 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___238)) ) with Main__airlockdoor.rec__main__airlockdoor__door = (Main__doorstatus__rep.of_rep(0)) } } )))
    in (
    #"main.adb" 26 0 0# Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___239)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lockouterdoor" defined at main.ads:60, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lockouterdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom

 let def #"main.ads" 60 0 0#"W:diverges:N" "GP_Subp:main.ads:60" 
   (__void_param : unit)
  requires { #"main.ads" 60 0 0# true }
  ensures { #"main.ads" 60 0 0# (#"main.ads" 63 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:63:14" "GP_Id:4" "comment:     Post => outerDoor.lock = Locked;
             ^ main.ads:63:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3774" "GP_Sloc:main.ads:63:14" ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:60 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:60 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:60 *)
  ;
   abstract ensures {true}(let _ = ( ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) && ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:60 *)
  ;
   assume {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) };
   try
   ( ( "GP_Sloc:main.adb:36:7" (#"main.adb" 36 0 0# ()) );
   ( "GP_Sloc:main.adb:36:22" (#"main.adb" 36 0 0# (let temp___241 = (let temp___240 = { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 36 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields(temp___240)))) in (
     ()))
     end ;
    { ( temp___240 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___240)) ) with Main__airlockdoor.rec__main__airlockdoor__lock = (Main__lockstatus__rep.of_rep(0)) } } )))
    in (
    #"main.adb" 36 0 0# Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___241)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "unlockouterdoor" defined at main.ads:66, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__unlockouterdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom

 let def #"main.ads" 66 0 0#"W:diverges:N" "GP_Subp:main.ads:66" 
   (__void_param : unit)
  requires { #"main.ads" 66 0 0# true }
  ensures { #"main.ads" 66 0 0# (#"main.ads" 69 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:69:14" "GP_Id:5" "comment:     Post => outerDoor.lock = Unlocked;
             ^ main.ads:69:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3829" "GP_Sloc:main.ads:69:14" ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:66 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:66 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:66 *)
  ;
   abstract ensures {true}(let _ = ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:66 *)
  ;
   assume {  ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) };
   try
   ( ( "GP_Sloc:main.adb:42:7" (#"main.adb" 42 0 0# ()) );
   ( "GP_Sloc:main.adb:42:22" (#"main.adb" 42 0 0# (let temp___243 = (let temp___242 = { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 42 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields(temp___242)))) in (
     ()))
     end ;
    { ( temp___242 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___242)) ) with Main__airlockdoor.rec__main__airlockdoor__lock = (Main__lockstatus__rep.of_rep(1)) } } )))
    in (
    #"main.adb" 42 0 0# Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___243)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "lockinnerdoor" defined at main.ads:72, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lockinnerdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__doorstatus
 use        Main__doorstatus__rep
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__innerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__innerdoor___axiom

 let def #"main.ads" 72 0 0#"W:diverges:N" "GP_Subp:main.ads:72" 
   (__void_param : unit)
  requires { #"main.ads" 72 0 0# true }
  ensures { #"main.ads" 72 0 0# (#"main.ads" 75 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:75:14" "GP_Id:6" "comment:     Post => innerDoor.lock = Locked;
             ^ main.ads:75:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3899" "GP_Sloc:main.ads:75:14" ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:72 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:72 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:72 *)
  ;
   abstract ensures {true}(let _ = ( ((Main__doorstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__door((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) && ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:72 *)
  ;
   assume {  ( ((Main__doorstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__door (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) /\ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) };
   try
   ( ( "GP_Sloc:main.adb:48:7" (#"main.adb" 48 0 0# ()) );
   ( "GP_Sloc:main.adb:48:22" (#"main.adb" 48 0 0# (let temp___245 = (let temp___244 = { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 48 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields(temp___244)))) in (
     ()))
     end ;
    { ( temp___244 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___244)) ) with Main__airlockdoor.rec__main__airlockdoor__lock = (Main__lockstatus__rep.of_rep(0)) } } )))
    in (
    #"main.adb" 48 0 0# Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___245)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "unlockinnerdoor" defined at main.ads:78, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__unlockinnerdoor__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__innerdoor
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__innerdoor___axiom

 let def #"main.ads" 78 0 0#"W:diverges:N" "GP_Subp:main.ads:78" 
   (__void_param : unit)
  requires { #"main.ads" 78 0 0# true }
  ensures { #"main.ads" 78 0 0# (#"main.ads" 81 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:81:14" "GP_Id:7" "comment:     Post => innerDoor.lock = Unlocked;
             ^ main.ads:81:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:3954" "GP_Sloc:main.ads:81:14" ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:78 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:78 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:78 *)
  ;
   abstract ensures {true}(let _ = ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:78 *)
  ;
   assume {  ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) };
   try
   ( ( "GP_Sloc:main.adb:54:7" (#"main.adb" 54 0 0# ()) );
   ( "GP_Sloc:main.adb:54:22" (#"main.adb" 54 0 0# (let temp___247 = (let temp___246 = { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } in (
    ( #"main.adb" 54 0 0# abstract ensures {true}(let _ = (Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields(temp___246)))) in (
     ()))
     end ;
    { ( temp___246 ) with Main__airlockdoor.__split_fields = { ( (Main__airlockdoor.__split_fields(temp___246)) ) with Main__airlockdoor.rec__main__airlockdoor__lock = (Main__lockstatus__rep.of_rep(1)) } } )))
    in (
    #"main.adb" 54 0 0# Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content <- ( (Main__airlockdoor.__split_fields(temp___247)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "allowoperation" defined at main.ads:84, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__allowoperation__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom
 use        Main__innerdoor___axiom
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus___axiom

 let def #"main.ads" 84 0 0#"W:diverges:N" "GP_Subp:main.ads:84" 
   (__void_param : unit)
  requires { #"main.ads" 84 0 0# true }
  ensures { #"main.ads" 84 0 0# (#"main.ads" 87 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:87:14" "GP_Id:8" "comment:     Post => currentOperationStatus = Allowed;
             ^ main.ads:87:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4027" "GP_Sloc:main.ads:87:14" (Main__currentoperationstatus.currentoperationstatus.int__content = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:84 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  (Main__operationstatus___axiom.dynamic_invariant Main__currentoperationstatus.currentoperationstatus.int__content False False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:84 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:84 *)
  ;
   abstract ensures {true}(let _ = ( ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) && ((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 0) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:84 *)
  ;
   assume {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) /\ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 0) ) };
   try
   ( ( "GP_Sloc:main.adb:60:7" (#"main.adb" 60 0 0# ()) );
   ( "GP_Sloc:main.adb:60:30" (#"main.adb" 60 0 0# #"main.adb" 60 0 0# Main__currentoperationstatus.currentoperationstatus.int__content <- ( 0 )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Main__currentoperationstatus.currentoperationstatus.int__content = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "prohibitoperation" defined at main.ads:89, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__prohibitoperation__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Main__lockstatus
 use        Main__lockstatus__rep
 use        Main__airlockdoor
 use        Main__airlockdoor___axiom
 use        Main__outerdoor
 use        Main__innerdoor
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus
 use        Main__doorstatus___axiom
 use        Main__lockstatus___axiom
 use        Main__airlockdoor___axiom
 use        Main__outerdoor___axiom
 use        Main__innerdoor___axiom
 use        Main__operationstatus___axiom
 use        Main__currentoperationstatus___axiom

 let def #"main.ads" 89 0 0#"W:diverges:N" "GP_Subp:main.ads:89" 
   (__void_param : unit)
  requires { #"main.ads" 89 0 0# true }
  ensures { #"main.ads" 89 0 0# (#"main.ads" 92 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:92:14" "GP_Id:9" "comment:     Post => currentOperationStatus = Prohibited;
             ^ main.ads:92:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4091" "GP_Sloc:main.ads:92:14" (Main__currentoperationstatus.currentoperationstatus.int__content = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:89 *)
  ;
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  (Main__airlockdoor___axiom.dynamic_invariant { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content } True False True True) };
   assume {  (Main__operationstatus___axiom.dynamic_invariant Main__currentoperationstatus.currentoperationstatus.int__content False False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:89 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:89 *)
  ;
   abstract ensures {true}(let _ = (Boolean.orb(((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1)) (((Main__lockstatus__rep.to_rep((Main__airlockdoor.rec__main__airlockdoor__lock((Main__airlockdoor.__split_fields({ Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content })))))) = 1))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:89 *)
  ;
   assume {  ( ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__outerdoor.outerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) \/ ((Main__lockstatus__rep.to_rep (Main__airlockdoor.rec__main__airlockdoor__lock (Main__airlockdoor.__split_fields { Main__airlockdoor.__split_fields = Main__innerdoor.innerdoor__split_fields.Main__airlockdoor.__split_fields__content }))) = 1) ) };
   try
   ( ( "GP_Sloc:main.adb:66:7" (#"main.adb" 66 0 0# ()) );
   ( "GP_Sloc:main.adb:66:30" (#"main.adb" 66 0 0# #"main.adb" 66 0 0# Main__currentoperationstatus.currentoperationstatus.int__content <- ( 1 )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Main__currentoperationstatus.currentoperationstatus.int__content = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "oxygentanklow" defined at main.ads:116, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__oxygentanklow__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Main__content
 use        Main__content__rep
 use        Main__tanklevelpercentage
 use        Main__tanklevelpercentage___axiom
 use        Array__Int__Main__content
 use        Main__oxygentank___axiom
 use        Main__tankstatus___axiom
 use        Main__oxygentankstatus
 use        Array__Int__Main__content
 use        Main__oxygentanklow__level
 use        Main__oxygentanklow__position
 use        Main__oxygentanklow__L_1
 use        Main__oxygentanklow__position___axiom
 use        Main__oxygentanklow__L_1___axiom
 use        Main__content___axiom
 use        Main__tanklevelpercentage___axiom
 use        Main__oxygentank___axiom
 use        Main__tankstatus___axiom
 use        Main__oxygentankstatus___axiom
 use        Main__oxygentanklow__level___axiom

 let def #"main.ads" 116 0 0#"W:diverges:N" "GP_Subp:main.ads:116" 
   (__void_param : unit)
  requires { #"main.ads" 116 0 0# true }
  ensures { #"main.ads" 116 0 0# (#"main.ads" 119 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:119:14" "GP_Id:11" "comment:     Post => oxygenTankStatus = Low;
             ^ main.ads:119:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4187" "GP_Sloc:main.ads:119:14" (Main__oxygentankstatus.oxygentankstatus.int__content = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:116 *)
  ;
   assume {  (Main__tankstatus___axiom.dynamic_invariant Main__oxygentankstatus.oxygentankstatus.int__content True False True True) };
   assume {  (Main__oxygentank___axiom.dynamic_invariant Main__oxygentanklow__level.level.Array__Int__Main__content.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:116 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:116 *)
  ;
   abstract ensures {true}(let _ = (Main__oxygentankstatus.oxygentankstatus.int__content = 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:116 *)
  ;
   assume {  (Main__oxygentankstatus.oxygentankstatus.int__content = 0) };
   try
   ( (#"main.adb" 75 0 0# ( #"main.adb" 75 0 0# Main__oxygentanklow__position.position.int__content <- ( 100 );
   #"main.adb" 75 0 0# assume { #"main.adb" 75 0 0# (Main__tanklevelpercentage___axiom.dynamic_invariant Main__oxygentanklow__position.position.int__content True False True True) } ));
   (#"main.adb" 77 0 0# ());
   ( "GP_Sloc:main.adb:77:36" (#"main.adb" 77 0 0# ( () (* Translation of an Ada loop from main.adb:77 *)
   ;
   (if ((Main__oxygentanklow__position.position.int__content > 0)) then (
    #"main.adb" 77 0 0# try
     ( #"main.adb" 77 0 0# abstract ensures {true}(let _ = Main__oxygentanklow__position.position.int__content in (
      ()))
      end ;
     (let temp___250 = #"main.adb" 77 0 0# (any int
     ensures {#"main.adb" 77 0 0# (result = Main__oxygentanklow__position.position.int__content)} 
     ) in (
      ( #"main.adb" 77 0 0# abstract ensures {true}(let _ = Main__oxygentanklow__level.level.Array__Int__Main__content.map__content in (
       ()))
       end ;
      (let temp___248 = #"main.adb" 77 0 0# (any Array__Int__Main__content.map
      ensures {#"main.adb" 77 0 0# (result = Main__oxygentanklow__level.level.Array__Int__Main__content.map__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:77 *)
       ;
       () (* While loop translating the Ada loop from main.adb:77 *)
       ;
       #"main.adb" 77 0 0# while True do
        ( () (* Assume implicit invariants from the loop main.adb:77 *)
        ;
        #"main.adb" 77 0 0# assume { #"main.adb" 77 0 0# (Boolean.andb(( ( ( ( true /\ (Main__oxygentank___axiom.dynamic_invariant Main__oxygentanklow__level.level.Array__Int__Main__content.map__content True True True True) ) /\ true ) /\ (Main__tanklevelpercentage___axiom.dynamic_invariant Main__oxygentanklow__position.position.int__content False True True True) ) /\ true )) ((Main__oxygentanklow__position.position.int__content > 0))) };
        () (* Check for absence of RTE in the invariant of loop main.adb:77 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop main.adb:77 *)
        ;
        ( "GP_Sloc:main.adb:78:16" (#"main.adb" 78 0 0# ()) );
        ( "GP_Sloc:main.adb:78:26" (#"main.adb" 78 0 0# #"main.adb" 78 0 0# Main__oxygentanklow__level.level.Array__Int__Main__content.map__content <- ( (Array__Int__Main__content.set(Main__oxygentanklow__level.level.Array__Int__Main__content.map__content) (Main__oxygentanklow__position.position.int__content) ((Main__content__rep.of_rep(1)))) )) );
        ( "GP_Sloc:main.adb:79:13" (#"main.adb" 79 0 0# ()) );
        ( "GP_Sloc:main.adb:79:10" (#"main.adb" 79 0 0# (if ((Main__oxygentanklow__position.position.int__content = 10)) then (
         ( "GP_Sloc:main.adb:79:32" (#"main.adb" 79 0 0# #"main.adb" 79 0 0# raise Main__oxygentanklow__L_1.L_1) )) else (
         ( ( "GP_Sloc:main.adb:80:15" (#"main.adb" 80 0 0# ()) );
         ( "GP_Sloc:main.adb:80:27" (#"main.adb" 80 0 0# ()) );
         ( "GP_Sloc:main.adb:80:24" (#"main.adb" 80 0 0# #"main.adb" 80 0 0# Main__oxygentanklow__position.position.int__content <- ( (#"main.adb" 80 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:main.adb:80:36" "GP_Reason:VC_RANGE_CHECK" "GP_Id:10" "comment:         else Position := Position - 1;
                                   ^ main.adb:80:36:VC_RANGE_CHECK" "GP_Shape:L_1_while__if__position_assign__sub" (Main__tanklevelpercentage.range_check_((Main__oxygentanklow__position.position.int__content - 1))) )) )) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:77 *)
        ;
        (if (not ( (Main__oxygentanklow__position.position.int__content > 0) )) then (
          raise Main__oxygentanklow__L_1.L_1)) )
       done )))
       )))
      )
    with
     Main__oxygentanklow__L_1.L_1 -> ()
    end)) )) );
   ( "GP_Sloc:main.adb:83:7" (#"main.adb" 83 0 0# ()) );
   ( "GP_Sloc:main.adb:83:24" (#"main.adb" 83 0 0# #"main.adb" 83 0 0# Main__oxygentankstatus.oxygentankstatus.int__content <- ( 1 )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Main__oxygentankstatus.oxygentankstatus.int__content = 1) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "soundoxygenlowalarm" defined at main.ads:122, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__soundoxygenlowalarm__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__tankstatus___axiom
 use        Main__oxygentankstatus
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm
 use        Main__tankstatus___axiom
 use        Main__oxygentankstatus___axiom
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm___axiom

 let def #"main.ads" 122 0 0#"W:diverges:N" "GP_Subp:main.ads:122" 
   (__void_param : unit)
  requires { #"main.ads" 122 0 0# true }
  ensures { #"main.ads" 122 0 0# (#"main.ads" 125 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:125:14" "GP_Id:12" "comment:     Post => oxygenTankLowAlarm = On;
             ^ main.ads:125:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4252" "GP_Sloc:main.ads:125:14" (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 0) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:122 *)
  ;
   assume {  (Main__tankstatus___axiom.dynamic_invariant Main__oxygentankstatus.oxygentankstatus.int__content True False True True) };
   assume {  (Main__alarm___axiom.dynamic_invariant Main__oxygentanklowalarm.oxygentanklowalarm.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:122 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:122 *)
  ;
   abstract ensures {true}(let _ = ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 1) && (Main__oxygentankstatus.oxygentankstatus.int__content = 1) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:122 *)
  ;
   assume {  ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 1) /\ (Main__oxygentankstatus.oxygentankstatus.int__content = 1) ) };
   try
   ( ( "GP_Sloc:main.adb:89:7" (#"main.adb" 89 0 0# ()) );
   ( "GP_Sloc:main.adb:89:26" (#"main.adb" 89 0 0# #"main.adb" 89 0 0# Main__oxygentanklowalarm.oxygentanklowalarm.int__content <- ( 0 )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 0) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "turnoffoxygenlowalarm" defined at main.ads:129, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__turnoffoxygenlowalarm__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm
 use        Main__recievedwarning___axiom
 use        Main__oxygentankwarningrecieved
 use        Main__alarm___axiom
 use        Main__oxygentanklowalarm___axiom
 use        Main__recievedwarning___axiom
 use        Main__oxygentankwarningrecieved___axiom

 let def #"main.ads" 129 0 0#"W:diverges:N" "GP_Subp:main.ads:129" 
   (__void_param : unit)
  requires { #"main.ads" 129 0 0# true }
  ensures { #"main.ads" 129 0 0# (#"main.ads" 132 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:main.ads:132:14" "GP_Id:13" "comment:     Post => oxygenTankLowAlarm = Off;
             ^ main.ads:132:14:VC_POSTCONDITION" ( "GP_Pretty_Ada:4324" "GP_Sloc:main.ads:132:14" (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 1) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram main.ads:129 *)
  ;
   assume {  (Main__alarm___axiom.dynamic_invariant Main__oxygentanklowalarm.oxygentanklowalarm.int__content True False True True) };
   assume {  (Main__recievedwarning___axiom.dynamic_invariant Main__oxygentankwarningrecieved.oxygentankwarningrecieved.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.ads:129 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.ads:129 *)
  ;
   abstract ensures {true}(let _ = ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 0) && (Main__oxygentankwarningrecieved.oxygentankwarningrecieved.int__content = 0) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram main.ads:129 *)
  ;
   assume {  ( (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 0) /\ (Main__oxygentankwarningrecieved.oxygentankwarningrecieved.int__content = 0) ) };
   try
   ( ( "GP_Sloc:main.adb:95:7" (#"main.adb" 95 0 0# ()) );
   ( "GP_Sloc:main.adb:95:26" (#"main.adb" 95 0 0# #"main.adb" 95 0 0# Main__oxygentanklowalarm.oxygentanklowalarm.int__content <- ( 1 )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Main__oxygentanklowalarm.oxygentanklowalarm.int__content = 1) in (
   ()))
   end  )
end
