(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TdepthmonitorB" defined at movement.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Movement__TdepthmonitorB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tdepthmonitorB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tdepthmonitorB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tdepthmonitorB__ref =
  { mutable tdepthmonitorB__content "model_trace:" "name:" : tdepthmonitorB }
 
 function tdepthmonitorB__ref___projection 
   (a : tdepthmonitorB__ref) : tdepthmonitorB =
  a.tdepthmonitorB__content
 
 meta "model_projection" function tdepthmonitorB__ref___projection
 
 meta "inline : no" function tdepthmonitorB__ref___projection
 
 val tdepthmonitorB__havoc 
   (x : tdepthmonitorB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TdepthmonitorB" defined at movement.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Movement__TdepthmonitorB__rep
 use        Movement__TdepthmonitorB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Movement__TdepthmonitorB.tdepthmonitorB) : int =
  (Movement__TdepthmonitorB.tdepthmonitorB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Movement__TdepthmonitorB.tdepthmonitorB, 
 predicate in_range = Movement__TdepthmonitorB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "depthmonitor" defined at movement.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Movement__depthmonitor
 use import "_gnatprove_standard".Main
 use import "int".Int

 type depthmonitor =
  < range 0 2000 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2000
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = depthmonitor, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type depthmonitor__ref =
  { mutable depthmonitor__content "model_trace:" "name:" : depthmonitor }
 
 function depthmonitor__ref___projection 
   (a : depthmonitor__ref) : depthmonitor =
  a.depthmonitor__content
 
 meta "model_projection" function depthmonitor__ref___projection
 
 meta "inline : no" function depthmonitor__ref___projection
 
 val depthmonitor__havoc 
   (x : depthmonitor__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "depthmonitor" defined at movement.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Movement__depthmonitor__rep
 use        Movement__depthmonitor
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Movement__depthmonitor.depthmonitor) : int =
  (Movement__depthmonitor.depthmonitor'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Movement__depthmonitor.depthmonitor, 
 predicate in_range = Movement__depthmonitor.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "operationstatus" defined at movement.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Movement__operationstatus
 use import "_gnatprove_standard".Main
 use import "int".Int

 type operationstatus 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = operationstatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type operationstatus__ref =
  { mutable operationstatus__content "model_trace:" "name:" : operationstatus }
 
 function operationstatus__ref___projection 
   (a : operationstatus__ref) : operationstatus =
  a.operationstatus__content
 
 meta "model_projection" function operationstatus__ref___projection
 
 meta "inline : no" function operationstatus__ref___projection
 
 val operationstatus__havoc 
   (x : operationstatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "operationstatus" defined at movement.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Movement__operationstatus__rep
 use        Movement__operationstatus
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Movement__operationstatus.operationstatus, 
 predicate in_range = Movement__operationstatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "diveby" defined at movement.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Movement__divethesubmarine__diveby
 use import "_gnatprove_standard".Main

 function diveby #"movement.ads" 18 0 0#"model" "model_trace:2774" "name:diveBy" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "diveby" defined at movement.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Movement__divethesubmarine__diveby___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "currentoperationstatus" defined at movement.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Movement__divethesubmarine__currentoperationstatus
 use import "_gnatprove_standard".Main

 function currentoperationstatus #"movement.ads" 20 0 0#"model" "model_trace:2792" "name:currentOperationStatus" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentoperationstatus" defined at movement.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Movement__divethesubmarine__currentoperationstatus___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "riseby" defined at movement.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Movement__raisethesubmarine__riseby
 use import "_gnatprove_standard".Main

 function riseby #"movement.ads" 30 0 0#"model" "model_trace:2849" "name:riseBy" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "riseby" defined at movement.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Movement__raisethesubmarine__riseby___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "TreactortemprangeB" defined at reactor.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TreactortemprangeB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type treactortemprangeB =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = treactortemprangeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type treactortemprangeB__ref =
  { mutable treactortemprangeB__content "model_trace:" "name:" : treactortemprangeB }
 
 function treactortemprangeB__ref___projection 
   (a : treactortemprangeB__ref) : treactortemprangeB =
  a.treactortemprangeB__content
 
 meta "model_projection" function treactortemprangeB__ref___projection
 
 meta "inline : no" function treactortemprangeB__ref___projection
 
 val treactortemprangeB__havoc 
   (x : treactortemprangeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TreactortemprangeB" defined at reactor.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Reactor__TreactortemprangeB__rep
 use        Reactor__TreactortemprangeB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Reactor__TreactortemprangeB.treactortemprangeB) : int =
  (Reactor__TreactortemprangeB.treactortemprangeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Reactor__TreactortemprangeB.treactortemprangeB, 
 predicate in_range = Reactor__TreactortemprangeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reactortemprange" defined at reactor.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactortemprange
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reactortemprange =
  < range 0 2400 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2400
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reactortemprange, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactortemprange__ref =
  { mutable reactortemprange__content "model_trace:" "name:" : reactortemprange }
 
 function reactortemprange__ref___projection 
   (a : reactortemprange__ref) : reactortemprange =
  a.reactortemprange__content
 
 meta "model_projection" function reactortemprange__ref___projection
 
 meta "inline : no" function reactortemprange__ref___projection
 
 val reactortemprange__havoc 
   (x : reactortemprange__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactortemprange" defined at reactor.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactortemprange__rep
 use        Reactor__reactortemprange
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Reactor__reactortemprange.reactortemprange) : int =
  (Reactor__reactortemprange.reactortemprange'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Reactor__reactortemprange.reactortemprange, 
 predicate in_range = Reactor__reactortemprange.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reactortempstatus" defined at reactor.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactortempstatus
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reactortempstatus 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reactortempstatus, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactortempstatus__ref =
  { mutable reactortempstatus__content "model_trace:" "name:" : reactortempstatus }
 
 function reactortempstatus__ref___projection 
   (a : reactortempstatus__ref) : reactortempstatus =
  a.reactortempstatus__content
 
 meta "model_projection" function reactortempstatus__ref___projection
 
 meta "inline : no" function reactortempstatus__ref___projection
 
 val reactortempstatus__havoc 
   (x : reactortempstatus__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactortempstatus" defined at reactor.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactortempstatus__rep
 use        Reactor__reactortempstatus
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Reactor__reactortempstatus.reactortempstatus, 
 predicate in_range = Reactor__reactortempstatus.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "currentdepth" defined at reactor.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Reactor__reactortempcoolsdown__currentdepth
 use import "_gnatprove_standard".Main

 function currentdepth #"reactor.ads" 27 0 0#"model" "name:currentDepth" "model_trace:2655" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at reactor.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempcoolsdown__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "R1b" defined at reactor.adb:15, created in Gnat2Why.Decls.Translate_Constant *)
module Reactor__reactortempoverheats__L_1__R1b
 use import "_gnatprove_standard".Main

 function r1b #"reactor.adb" 15 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T2b" defined at reactor.adb:15, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactortempoverheats__L_1__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Reactor__TreactortemprangeB
 use        Reactor__TreactortemprangeB__rep

 type t2b =
  Reactor__TreactortemprangeB.treactortemprangeB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Reactor__TreactortemprangeB__rep.to_rep, 
 function base_of_rep = Reactor__TreactortemprangeB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for defining the constant "R3b" defined at reactor.adb:35, created in Gnat2Why.Decls.Translate_Constant *)
module Reactor__reactortempcoolsdown__L_2__R3b
 use import "_gnatprove_standard".Main

 function r3b #"reactor.adb" 35 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T4b" defined at reactor.adb:35, created in Gnat2Why.Types.Translate_Type *)
module Reactor__reactortempcoolsdown__L_2__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Reactor__TreactortemprangeB
 use        Reactor__TreactortemprangeB__rep

 type t4b =
  Reactor__TreactortemprangeB.treactortemprangeB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Reactor__TreactortemprangeB__rep.to_rep, 
 function base_of_rep = Reactor__TreactortemprangeB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content "model_trace:" "name:" : t4b }
 
 function t4b__ref___projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "currentdepth" defined at movement.ads:19, created in Gnat2Why.Decls.Translate_Variable *)
module Movement__divethesubmarine__currentdepth
 use import "_gnatprove_standard".Main

 val currentdepth #"movement.ads" 19 0 0#"model_projected" "model_trace:2783" "name:currentDepth"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at movement.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Movement__divethesubmarine__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentdepth" defined at movement.ads:31, created in Gnat2Why.Decls.Translate_Variable *)
module Movement__raisethesubmarine__currentdepth
 use import "_gnatprove_standard".Main

 val currentdepth #"movement.ads" 31 0 0#"model_projected" "name:currentDepth" "model_trace:2858"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at movement.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Movement__raisethesubmarine__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentdepth" defined at movement.ads:39, created in Gnat2Why.Decls.Translate_Variable *)
module Movement__surfacethesubmarine__currentdepth
 use import "_gnatprove_standard".Main

 val currentdepth #"movement.ads" 39 0 0#"model_projected" "name:currentDepth" "model_trace:2905"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at movement.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Movement__surfacethesubmarine__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactortemp" defined at reactor.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempoverheats__reactortemp
 use import "_gnatprove_standard".Main

 val reactortemp #"reactor.ads" 13 0 0#"model_projected" "model_trace:2564" "name:reactorTemp"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactortemp" defined at reactor.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempoverheats__reactortemp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentdepth" defined at reactor.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempoverheats__currentdepth
 use import "_gnatprove_standard".Main

 val currentdepth #"reactor.ads" 14 0 0#"model_projected" "name:currentDepth" "model_trace:2573"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentdepth" defined at reactor.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempoverheats__currentdepth___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentoperationstatus" defined at reactor.ads:15, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempoverheats__currentoperationstatus
 use import "_gnatprove_standard".Main

 val currentoperationstatus #"reactor.ads" 15 0 0#"model_projected" "name:currentOperationStatus" "model_trace:2582"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentoperationstatus" defined at reactor.ads:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempoverheats__currentoperationstatus___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactorstatus" defined at reactor.ads:16, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempoverheats__reactorstatus
 use import "_gnatprove_standard".Main

 val reactorstatus #"reactor.ads" 16 0 0#"model_projected" "model_trace:2591" "name:reactorStatus"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactorstatus" defined at reactor.ads:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempoverheats__reactorstatus___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactortemp" defined at reactor.ads:26, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempcoolsdown__reactortemp
 use import "_gnatprove_standard".Main

 val reactortemp #"reactor.ads" 26 0 0#"model_projected" "name:reactorTemp" "model_trace:2646"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactortemp" defined at reactor.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempcoolsdown__reactortemp___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "currentoperationstatus" defined at reactor.ads:28, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempcoolsdown__currentoperationstatus
 use import "_gnatprove_standard".Main

 val currentoperationstatus #"reactor.ads" 28 0 0#"model_projected" "name:currentOperationStatus" "model_trace:2664"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "currentoperationstatus" defined at reactor.ads:28, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempcoolsdown__currentoperationstatus___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "reactorstatus" defined at reactor.ads:29, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempcoolsdown__reactorstatus
 use import "_gnatprove_standard".Main

 val reactorstatus #"reactor.ads" 29 0 0#"model_projected" "name:reactorStatus" "model_trace:2673"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reactorstatus" defined at reactor.ads:29, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempcoolsdown__reactorstatus___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at reactor.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempoverheats__L_1__i
 use import "_gnatprove_standard".Main

 val i #"reactor.adb" 15 0 0#"model_projected" "model_trace:2358" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at reactor.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempoverheats__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at reactor.adb:35, created in Gnat2Why.Decls.Translate_Variable *)
module Reactor__reactortempcoolsdown__L_2__i
 use import "_gnatprove_standard".Main

 val i #"reactor.adb" 35 0 0#"model_projected" "name:I" "model_trace:2455"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at reactor.adb:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempcoolsdown__L_2__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "divethesubmarine" defined at movement.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Movement__divethesubmarine
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "raisethesubmarine" defined at movement.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Movement__raisethesubmarine
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "surfacethesubmarine" defined at movement.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Movement__surfacethesubmarine
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reactortempoverheats" defined at reactor.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__reactortempoverheats
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "reactortempcoolsdown" defined at reactor.ads:26, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Reactor__reactortempcoolsdown
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at reactor.adb:15, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Reactor__reactortempoverheats__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at reactor.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempoverheats__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at reactor.adb:35, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Reactor__reactortempcoolsdown__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at reactor.adb:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Reactor__reactortempcoolsdown__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TdepthmonitorB" defined at movement.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Movement__TdepthmonitorB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "depthmonitor" defined at movement.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Movement__depthmonitor___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Movement__depthmonitor

 predicate dynamic_invariant "inline" 
   (temp___expr_158 : int) (temp___is_init_154 : bool) (temp___skip_constant_155 : bool) (temp___do_toplevel_156 : bool) (temp___do_typ_inv_157 : bool)  =
  (if (( temp___is_init_154 \/ (Movement__depthmonitor.first <= Movement__depthmonitor.last) )) then (
   (Movement__depthmonitor.dynamic_property Movement__depthmonitor.first Movement__depthmonitor.last temp___expr_158)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_159 : int) (temp___skip_top_level_160 : bool)  =
  true

end

(* Module giving axioms for type "operationstatus" defined at movement.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Movement__operationstatus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Movement__operationstatus

 predicate dynamic_invariant "inline" 
   (temp___expr_165 : int) (temp___is_init_161 : bool) (temp___skip_constant_162 : bool) (temp___do_toplevel_163 : bool) (temp___do_typ_inv_164 : bool)  =
  (if (( temp___is_init_161 \/ (Movement__operationstatus.first <= Movement__operationstatus.last) )) then (
   (Movement__operationstatus.dynamic_property Movement__operationstatus.first Movement__operationstatus.last temp___expr_165)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_166 : int) (temp___skip_top_level_167 : bool)  =
  true

end

(* Module giving axioms for type "TreactortemprangeB" defined at reactor.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__TreactortemprangeB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "reactortemprange" defined at reactor.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__reactortemprange___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Reactor__reactortemprange

 predicate dynamic_invariant "inline" 
   (temp___expr_172 : int) (temp___is_init_168 : bool) (temp___skip_constant_169 : bool) (temp___do_toplevel_170 : bool) (temp___do_typ_inv_171 : bool)  =
  (if (( temp___is_init_168 \/ (Reactor__reactortemprange.first <= Reactor__reactortemprange.last) )) then (
   (Reactor__reactortemprange.dynamic_property Reactor__reactortemprange.first Reactor__reactortemprange.last temp___expr_172)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_173 : int) (temp___skip_top_level_174 : bool)  =
  true

end

(* Module giving axioms for type "reactortempstatus" defined at reactor.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__reactortempstatus___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Reactor__reactortempstatus

 predicate dynamic_invariant "inline" 
   (temp___expr_179 : int) (temp___is_init_175 : bool) (temp___skip_constant_176 : bool) (temp___do_toplevel_177 : bool) (temp___do_typ_inv_178 : bool)  =
  (if (( temp___is_init_175 \/ (Reactor__reactortempstatus.first <= Reactor__reactortempstatus.last) )) then (
   (Reactor__reactortempstatus.dynamic_property Reactor__reactortempstatus.first Reactor__reactortempstatus.last temp___expr_179)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_180 : int) (temp___skip_top_level_181 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at reactor.adb:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__reactortempoverheats__L_1__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at reactor.adb:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Reactor__reactortempcoolsdown__L_2__T4b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "R1b" defined at reactor.adb:15, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Reactor__reactortempoverheats__L_1__R1b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R3b" defined at reactor.adb:35, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Reactor__reactortempcoolsdown__L_2__R3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "divethesubmarine" defined at movement.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Movement__divethesubmarine___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Movement__depthmonitor___axiom

 val divethesubmarine 
   (diveby : int) (currentdepth : int__ref) (currentoperationstatus : int) : unit
  requires {  ( ((currentdepth.int__content + diveby) <= 2000) /\ ( (currentdepth.int__content >= 0) /\ ( (currentoperationstatus = 0) /\ (diveby > 0) ) ) ) }
  ensures {  ( ( (currentdepth.int__content <= 2000) /\ (currentdepth.int__content > 0) ) /\ (Movement__depthmonitor___axiom.dynamic_invariant currentdepth.int__content True True True True) ) }
  writes {currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "raisethesubmarine" defined at movement.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Movement__raisethesubmarine___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Movement__depthmonitor___axiom

 val raisethesubmarine 
   (riseby : int) (currentdepth : int__ref) : unit
  requires {  ( ((currentdepth.int__content - riseby) >= 0) /\ ( (currentdepth.int__content > 0) /\ (riseby > 0) ) ) }
  ensures {  ( (currentdepth.int__content >= 0) /\ (Movement__depthmonitor___axiom.dynamic_invariant currentdepth.int__content True True True True) ) }
  writes {currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "surfacethesubmarine" defined at movement.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Movement__surfacethesubmarine___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Movement__depthmonitor___axiom

 val surfacethesubmarine 
   (currentdepth : int__ref) : unit
  requires {  (currentdepth.int__content > 0) }
  ensures {  ( (currentdepth.int__content = 0) /\ (Movement__depthmonitor___axiom.dynamic_invariant currentdepth.int__content True True True True) ) }
  writes {currentdepth}

end

(* Module for declaring a program function (and possibly an axiom) for "reactortempoverheats" defined at reactor.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__reactortempoverheats___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Movement__depthmonitor___axiom
 use        Movement__operationstatus___axiom
 use        Reactor__reactortemprange___axiom
 use        Reactor__reactortempstatus___axiom

 val reactortempoverheats 
   (reactortemp : int__ref) (currentdepth : int__ref) (currentoperationstatus : int__ref) (reactorstatus : int__ref) : unit
  requires {  ( (reactortemp.int__content < 2400) /\ (currentdepth.int__content > 0) ) }
  ensures {  ( ( (reactortemp.int__content = 2400) /\ ( (currentoperationstatus.int__content = 1) /\ ( (currentdepth.int__content = 0) /\ (reactorstatus.int__content = 0) ) ) ) /\ ( ( ( (Reactor__reactortemprange___axiom.dynamic_invariant reactortemp.int__content True True True True) /\ (Movement__depthmonitor___axiom.dynamic_invariant currentdepth.int__content True True True True) ) /\ (Movement__operationstatus___axiom.dynamic_invariant currentoperationstatus.int__content True True True True) ) /\ (Reactor__reactortempstatus___axiom.dynamic_invariant reactorstatus.int__content True True True True) ) ) }
  writes {reactortemp, currentdepth, currentoperationstatus, reactorstatus}

end

(* Module for declaring a program function (and possibly an axiom) for "reactortempcoolsdown" defined at reactor.ads:26, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Reactor__reactortempcoolsdown___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Movement__operationstatus___axiom
 use        Reactor__reactortemprange___axiom
 use        Reactor__reactortempstatus___axiom

 val reactortempcoolsdown 
   (reactortemp : int__ref) (currentdepth : int) (currentoperationstatus : int__ref) (reactorstatus : int__ref) : unit
  requires {  ( (reactortemp.int__content = 2400) /\ ( (currentdepth = 0) /\ (currentoperationstatus.int__content = 1) ) ) }
  ensures {  ( ( (currentoperationstatus.int__content = 0) /\ (reactorstatus.int__content = 1) ) /\ ( ( (Reactor__reactortemprange___axiom.dynamic_invariant reactortemp.int__content True True True True) /\ (Movement__operationstatus___axiom.dynamic_invariant currentoperationstatus.int__content True True True True) ) /\ (Reactor__reactortempstatus___axiom.dynamic_invariant reactorstatus.int__content True True True True) ) ) }
  writes {reactortemp, currentoperationstatus, reactorstatus}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "reactor" defined at reactor.ads:4, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Reactor__package_def
 use import "_gnatprove_standard".Main

 let def #"reactor.ads" 4 0 0#"GP_Subp:reactor.ads:4" "W:diverges:N" 
   (__void_param : unit)
  requires { #"reactor.ads" 4 0 0# true }
  ensures { #"reactor.ads" 4 0 0# true }
   =
  ( (#"reactor.ads" 4 0 0# ());
  (#"reactor.ads" 9 0 0# ());
  (#"reactor.ads" 11 0 0# ());
  (#"reactor.ads" 13 0 0# ());
  (#"reactor.ads" 20 0 0# ());
  (#"reactor.ads" 21 0 0# ());
  (#"reactor.ads" 22 0 0# ());
  (#"reactor.ads" 20 0 0# ());
  (#"reactor.ads" 17 0 0# ());
  (#"reactor.ads" 17 0 0# ());
  (#"reactor.ads" 26 0 0# ());
  (#"reactor.ads" 34 0 0# ());
  (#"reactor.ads" 34 0 0# ());
  (#"reactor.ads" 30 0 0# ());
  (#"reactor.ads" 31 0 0# ());
  (#"reactor.ads" 30 0 0# ());
  (#"reactor.ads" 30 0 0# ());
  (#"reactor.ads" 30 0 0# ());
  (#"reactor.ads" 30 0 0# ());
  (#"reactor.ads" 30 0 0# ());
  (#"reactor.ads" 30 0 0# ());
  (#"reactor.adb" 4 0 0# ());
  (#"reactor.adb" 10 0 0# ());
  (#"reactor.adb" 27 0 0# ());
  ( "GP_Sloc:reactor.adb:47:1" (#"reactor.adb" 47 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "reactortempoverheats" defined at reactor.ads:13, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__reactortempoverheats__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Movement__surfacethesubmarine___axiom
 use        Movement__depthmonitor___axiom
 use        Movement__operationstatus___axiom
 use        Reactor__reactortemprange___axiom
 use        Reactor__reactortempstatus___axiom
 use        Reactor__reactortempoverheats__reactortemp
 use        Reactor__reactortempoverheats__currentdepth
 use        Reactor__reactortempoverheats__currentoperationstatus
 use        Reactor__reactortempoverheats__reactorstatus
 use        Reactor__reactortempoverheats__L_1__R1b
 use        Reactor__reactortempoverheats__L_1
 use        Reactor__reactortempoverheats__L_1__i
 use        Reactor__reactortempoverheats__L_1__i___axiom
 use        Reactor__reactortempoverheats__L_1___axiom
 use        Reactor__reactortemprange___axiom
 use        Reactor__reactortempstatus___axiom
 use        Reactor__reactortempoverheats__reactortemp___axiom
 use        Reactor__reactortempoverheats__currentdepth___axiom
 use        Reactor__reactortempoverheats__currentoperationstatus___axiom
 use        Reactor__reactortempoverheats__reactorstatus___axiom
 use        Movement__depthmonitor___axiom
 use        Movement__operationstatus___axiom
 use        Movement__surfacethesubmarine___axiom
 use        Reactor__reactortempoverheats__L_1__R1b___axiom

 let def #"reactor.ads" 13 0 0#"W:diverges:N" "GP_Subp:reactor.ads:13" 
   (__void_param : unit)
  requires { #"reactor.ads" 13 0 0# true }
  ensures { #"reactor.ads" 13 0 0# (#"reactor.ads" 20 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:reactor.ads:20:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:1" "comment:     Post => reactorTemp = ReactorTempRange'Last
             ^ reactor.ads:20:14:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( ( "GP_Pretty_Ada:3398" "GP_Sloc:reactor.ads:20:14" (Reactor__reactortempoverheats__reactortemp.reactortemp.int__content = 2400) ) /\ ( ( "GP_Pretty_Ada:2628" "GP_Sloc:reactor.ads:21:38" (Reactor__reactortempoverheats__currentoperationstatus.currentoperationstatus.int__content = 1) ) /\ ( ( "GP_Pretty_Ada:2632" "GP_Sloc:reactor.ads:22:28" (Reactor__reactortempoverheats__currentdepth.currentdepth.int__content = 0) ) /\ ( "GP_Pretty_Ada:2638" "GP_Sloc:reactor.ads:23:29" (Reactor__reactortempoverheats__reactorstatus.reactorstatus.int__content = 0) ) ) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:13 *)
  ;
   assume {  (Reactor__reactortemprange___axiom.dynamic_invariant Reactor__reactortempoverheats__reactortemp.reactortemp.int__content True False True True) };
   assume {  (Movement__depthmonitor___axiom.dynamic_invariant Reactor__reactortempoverheats__currentdepth.currentdepth.int__content True False True True) };
   assume {  (Movement__operationstatus___axiom.dynamic_invariant Reactor__reactortempoverheats__currentoperationstatus.currentoperationstatus.int__content True False True True) };
   assume {  (Reactor__reactortempstatus___axiom.dynamic_invariant Reactor__reactortempoverheats__reactorstatus.reactorstatus.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:13 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:13 *)
  ;
   abstract ensures {true}(let _ = ( (Reactor__reactortempoverheats__reactortemp.reactortemp.int__content < 2400) && (Reactor__reactortempoverheats__currentdepth.currentdepth.int__content > 0) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram reactor.ads:13 *)
  ;
   assume {  ( (Reactor__reactortempoverheats__reactortemp.reactortemp.int__content < 2400) /\ (Reactor__reactortempoverheats__currentdepth.currentdepth.int__content > 0) ) };
   try
   ( (#"reactor.adb" 15 0 0# ());
   ( "GP_Sloc:reactor.adb:15:16" (#"reactor.adb" 15 0 0# (#"reactor.adb" 15 0 0# ( (let reactor__reactortempoverheats__L_1__R1b__assume = Reactor__reactortempoverheats__reactortemp.reactortemp.int__content in (
    #"reactor.adb" 15 0 0# assume { #"reactor.adb" 15 0 0# (reactor__reactortempoverheats__L_1__R1b__assume = Reactor__reactortempoverheats__L_1__R1b.r1b) }))
   ;
   #"reactor.adb" 15 0 0# assume { #"reactor.adb" 15 0 0# (Reactor__reactortemprange___axiom.dynamic_invariant Reactor__reactortempoverheats__L_1__R1b.r1b True False True True) } ))) );
   ( "GP_Sloc:reactor.adb:15:51" (#"reactor.adb" 15 0 0# (let temp___182 = Reactor__reactortempoverheats__L_1__R1b.r1b in (
   (let temp___183 = 2400 in (
    ( #"reactor.adb" 15 0 0# Reactor__reactortempoverheats__L_1__i.i.int__content <- ( temp___182 );
    () (* Translation of an Ada loop from reactor.adb:15 *)
    ;
    (if ((Boolean.andb((temp___182 <= Reactor__reactortempoverheats__L_1__i.i.int__content)) ((Reactor__reactortempoverheats__L_1__i.i.int__content <= temp___183)))) then (
     #"reactor.adb" 15 0 0# try
      ( #"reactor.adb" 15 0 0# abstract ensures {true}(let _ = Reactor__reactortempoverheats__reactortemp.reactortemp.int__content in (
       ()))
       end ;
      (let temp___184 = #"reactor.adb" 15 0 0# (any int
      ensures {#"reactor.adb" 15 0 0# (result = Reactor__reactortempoverheats__reactortemp.reactortemp.int__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop reactor.adb:15 *)
       ;
       () (* While loop translating the Ada loop from reactor.adb:15 *)
       ;
       #"reactor.adb" 15 0 0# while True do
        ( () (* Assume implicit invariants from the loop reactor.adb:15 *)
        ;
        #"reactor.adb" 15 0 0# assume { #"reactor.adb" 15 0 0# (Boolean.andb(( ( true /\ (Reactor__reactortemprange___axiom.dynamic_invariant Reactor__reactortempoverheats__reactortemp.reactortemp.int__content True True True True) ) /\ true )) (( (Reactor__reactortempoverheats__L_1__R1b.r1b <= Reactor__reactortempoverheats__L_1__i.i.int__content) /\ (Reactor__reactortempoverheats__L_1__i.i.int__content <= 2400) ))) };
        () (* Check for absence of RTE in the invariant of loop reactor.adb:15 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop reactor.adb:15 *)
        ;
        ( "GP_Sloc:reactor.adb:16:22" (#"reactor.adb" 16 0 0# #"reactor.adb" 16 0 0# Reactor__reactortempoverheats__reactortemp.reactortemp.int__content <- ( Reactor__reactortempoverheats__L_1__i.i.int__content )) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop reactor.adb:15 *)
        ;
        (if ((Reactor__reactortempoverheats__L_1__i.i.int__content = temp___183)) then (
          raise Reactor__reactortempoverheats__L_1.L_1));
         Reactor__reactortempoverheats__L_1__i.i.int__content <- ( (Reactor__reactortempoverheats__L_1__i.i.int__content + 1) ) )
       done )))
       )
     with
      Reactor__reactortempoverheats__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:reactor.adb:19:7" (#"reactor.adb" 19 0 0# (if ((Reactor__reactortempoverheats__reactortemp.reactortemp.int__content = 2400)) then (
    ( ( "GP_Sloc:reactor.adb:20:33" (#"reactor.adb" 20 0 0# #"reactor.adb" 20 0 0# Reactor__reactortempoverheats__currentoperationstatus.currentoperationstatus.int__content <- ( 1 )) );
    ( "GP_Sloc:reactor.adb:21:10" (#"reactor.adb" 21 0 0# ()) );
    ( "GP_Sloc:reactor.adb:21:10" (#"reactor.adb" 21 0 0# ( (#"reactor.adb" 21 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:reactor.adb:21:10" "GP_Reason:VC_PRECONDITION" "GP_Id:0" "comment:         SurfaceTheSubmarine(currentDepth);
         ^ reactor.adb:21:10:VC_PRECONDITION" "GP_Shape:if__call_surfacethesubmarine" (Movement__surfacethesubmarine___axiom.surfacethesubmarine(Reactor__reactortempoverheats__currentdepth.currentdepth)) )) )) );
    ( "GP_Sloc:reactor.adb:22:24" (#"reactor.adb" 22 0 0# #"reactor.adb" 22 0 0# Reactor__reactortempoverheats__reactorstatus.reactorstatus.int__content <- ( 0 )) ) )) else (
    ()))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (Reactor__reactortempoverheats__reactortemp.reactortemp.int__content = 2400) && ( (Reactor__reactortempoverheats__currentoperationstatus.currentoperationstatus.int__content = 1) && ( (Reactor__reactortempoverheats__currentdepth.currentdepth.int__content = 0) && (Reactor__reactortempoverheats__reactorstatus.reactorstatus.int__content = 0) ) ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "reactortempcoolsdown" defined at reactor.ads:26, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Reactor__reactortempcoolsdown__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Movement__depthmonitor___axiom
 use        Movement__operationstatus___axiom
 use        Reactor__reactortemprange___axiom
 use        Reactor__reactortempstatus___axiom
 use        Reactor__reactortempcoolsdown__reactortemp
 use        Reactor__reactortempcoolsdown__currentdepth
 use        Reactor__reactortempcoolsdown__currentoperationstatus
 use        Reactor__reactortempcoolsdown__reactorstatus
 use        Reactor__reactortempcoolsdown__L_2__R3b
 use        Reactor__reactortempcoolsdown__L_2
 use        Reactor__reactortempcoolsdown__L_2__i
 use        Reactor__reactortempcoolsdown__L_2__i___axiom
 use        Reactor__reactortempcoolsdown__L_2___axiom
 use        Reactor__reactortemprange___axiom
 use        Reactor__reactortempstatus___axiom
 use        Reactor__reactortempcoolsdown__reactortemp___axiom
 use        Reactor__reactortempcoolsdown__currentdepth___axiom
 use        Reactor__reactortempcoolsdown__currentoperationstatus___axiom
 use        Reactor__reactortempcoolsdown__reactorstatus___axiom
 use        Movement__depthmonitor___axiom
 use        Movement__operationstatus___axiom
 use        Reactor__reactortempcoolsdown__L_2__R3b___axiom

 let def #"reactor.ads" 26 0 0#"W:diverges:N" "GP_Subp:reactor.ads:26" 
   (__void_param : unit)
  requires { #"reactor.ads" 26 0 0# true }
  ensures { #"reactor.ads" 26 0 0# (#"reactor.ads" 34 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:reactor.ads:34:14" "GP_Id:2" "comment:     Post => currentOperationStatus = Allowed
             ^ reactor.ads:34:14:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3524" "GP_Sloc:reactor.ads:34:14" (Reactor__reactortempcoolsdown__currentoperationstatus.currentoperationstatus.int__content = 0) ) /\ ( "GP_Pretty_Ada:2712" "GP_Sloc:reactor.ads:35:29" (Reactor__reactortempcoolsdown__reactorstatus.reactorstatus.int__content = 1) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram reactor.ads:26 *)
  ;
   assume {  (Reactor__reactortemprange___axiom.dynamic_invariant Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content True False True True) };
   assume {  (Movement__depthmonitor___axiom.dynamic_invariant Reactor__reactortempcoolsdown__currentdepth.currentdepth True False True True) };
   assume {  (Movement__operationstatus___axiom.dynamic_invariant Reactor__reactortempcoolsdown__currentoperationstatus.currentoperationstatus.int__content True False True True) };
   assume {  (Reactor__reactortempstatus___axiom.dynamic_invariant Reactor__reactortempcoolsdown__reactorstatus.reactorstatus.int__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram reactor.ads:26 *)
  ;
  () (* Check for RTE in the Pre of the subprogram reactor.ads:26 *)
  ;
   abstract ensures {true}(let _ = ( (Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content = 2400) && ( (Reactor__reactortempcoolsdown__currentdepth.currentdepth = 0) && (Reactor__reactortempcoolsdown__currentoperationstatus.currentoperationstatus.int__content = 1) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram reactor.ads:26 *)
  ;
   assume {  ( (Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content = 2400) /\ ( (Reactor__reactortempcoolsdown__currentdepth.currentdepth = 0) /\ (Reactor__reactortempcoolsdown__currentoperationstatus.currentoperationstatus.int__content = 1) ) ) };
   try
   ( (#"reactor.adb" 35 0 0# ());
   ( "GP_Sloc:reactor.adb:32:7" (#"reactor.adb" 32 0 0# (if ((Boolean.andb((Boolean.andb((Reactor__reactortempcoolsdown__reactorstatus.reactorstatus.int__content = 0)) ((Reactor__reactortempcoolsdown__currentdepth.currentdepth = 0)))) ((Reactor__reactortempcoolsdown__currentoperationstatus.currentoperationstatus.int__content = 1)))) then (
    ( ( "GP_Sloc:reactor.adb:35:51" (#"reactor.adb" 35 0 0# (#"reactor.adb" 35 0 0# ( (let reactor__reactortempcoolsdown__L_2__R3b__assume = Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content in (
     #"reactor.adb" 35 0 0# assume { #"reactor.adb" 35 0 0# (reactor__reactortempcoolsdown__L_2__R3b__assume = Reactor__reactortempcoolsdown__L_2__R3b.r3b) }))
    ;
    #"reactor.adb" 35 0 0# assume { #"reactor.adb" 35 0 0# (Reactor__reactortemprange___axiom.dynamic_invariant Reactor__reactortempcoolsdown__L_2__R3b.r3b True False True True) } ))) );
    ( "GP_Sloc:reactor.adb:35:63" (#"reactor.adb" 35 0 0# (let temp___185 = 0 in (
    (let temp___186 = Reactor__reactortempcoolsdown__L_2__R3b.r3b in (
     ( #"reactor.adb" 35 0 0# Reactor__reactortempcoolsdown__L_2__i.i.int__content <- ( temp___186 );
     () (* Translation of an Ada loop from reactor.adb:35 *)
     ;
     (if ((Boolean.andb((temp___185 <= Reactor__reactortempcoolsdown__L_2__i.i.int__content)) ((Reactor__reactortempcoolsdown__L_2__i.i.int__content <= temp___186)))) then (
      #"reactor.adb" 35 0 0# try
       ( #"reactor.adb" 35 0 0# abstract ensures {true}(let _ = Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content in (
        ()))
        end ;
       (let temp___187 = #"reactor.adb" 35 0 0# (any int
       ensures {#"reactor.adb" 35 0 0# (result = Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop reactor.adb:35 *)
        ;
        () (* While loop translating the Ada loop from reactor.adb:35 *)
        ;
        #"reactor.adb" 35 0 0# while True do
         ( () (* Assume implicit invariants from the loop reactor.adb:35 *)
         ;
         #"reactor.adb" 35 0 0# assume { #"reactor.adb" 35 0 0# (Boolean.andb(( ( true /\ (Reactor__reactortemprange___axiom.dynamic_invariant Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content True True True True) ) /\ true )) (( (0 <= Reactor__reactortempcoolsdown__L_2__i.i.int__content) /\ (Reactor__reactortempcoolsdown__L_2__i.i.int__content <= Reactor__reactortempcoolsdown__L_2__R3b.r3b) ))) };
         () (* Check for absence of RTE in the invariant of loop reactor.adb:35 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop reactor.adb:35 *)
         ;
         ( "GP_Sloc:reactor.adb:36:25" (#"reactor.adb" 36 0 0# #"reactor.adb" 36 0 0# Reactor__reactortempcoolsdown__reactortemp.reactortemp.int__content <- ( Reactor__reactortempcoolsdown__L_2__i.i.int__content )) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop reactor.adb:35 *)
         ;
         (if ((Reactor__reactortempcoolsdown__L_2__i.i.int__content = temp___185)) then (
           raise Reactor__reactortempcoolsdown__L_2.L_2));
          Reactor__reactortempcoolsdown__L_2__i.i.int__content <- ( (Reactor__reactortempcoolsdown__L_2__i.i.int__content - 1) ) )
        done )))
        )
      with
       Reactor__reactortempcoolsdown__L_2.L_2 -> ()
      end)) )))
    ))
    ) ) )) else (
    ()))) );
   ( "GP_Sloc:reactor.adb:40:30" (#"reactor.adb" 40 0 0# #"reactor.adb" 40 0 0# Reactor__reactortempcoolsdown__currentoperationstatus.currentoperationstatus.int__content <- ( 0 )) );
   ( "GP_Sloc:reactor.adb:41:21" (#"reactor.adb" 41 0 0# #"reactor.adb" 41 0 0# Reactor__reactortempcoolsdown__reactorstatus.reactorstatus.int__content <- ( 1 )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (Reactor__reactortempcoolsdown__currentoperationstatus.currentoperationstatus.int__content = 0) && (Reactor__reactortempcoolsdown__reactorstatus.reactorstatus.int__content = 1) ) in (
   ()))
   end  )
end
